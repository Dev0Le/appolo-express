{"name":"Appolo-express","tagline":"","body":"Appolo Express  [![Build Status](https://travis-ci.org/shmoop207/appolo-express.png?branch=master)](https://travis-ci.org/shmoop207/appolo-express) [![Dependencies status](https://david-dm.org/shmoop207/appolo-express.png)](https://david-dm.org/shmoop207/appolo-express)\r\n=======\r\n\r\nAppolo Express is an MVC Framework for Node.js build on top [expressjs][1] 4. \r\nBuild with [appolo-class][2] class system and [appolo-inject][3] dependency injection system.\r\n\r\nAppolo architecture follows common patten of MVC and dependency injection which makes it easy to build better performance, flexibility and easy maintenance server side in nodejs.\r\n\r\n\r\n## Features\r\n  * MVC Architecture\r\n  * Powerful class system\r\n  * dependency injection system\r\n  * simple routing system\r\n  * Manage easily configurations and environments \r\n  * Simple folder structures\r\n  * Easy integrate third party services\r\n  * Easy to get started\r\n  \r\n \r\n## Installation ##\r\n```javascript\r\nnpm install appolo-express --save\r\n```\r\n\r\n##Quick start ##\r\nin your app.js file\r\n```javascript\r\nvar appolo  = require('appolo');\r\nappolo.launcher.launch();\r\n```\r\n\r\n##Recommended Directory Structure ##\r\nthe environments folder must to exist every thing else is optional appolo will require all files in the config and server folders but the environments folder will be loaded first.\r\n```javascript\r\n- config\r\n    - enviremnts\r\n        - all.js\r\n        - develpment.js\r\n        - production.js\r\n    - express\r\n        -express.js\r\n    - loggers\r\n        - logger.js\r\n    - routes\r\n        routes.js\r\n    - redis\r\n        - redis.js\r\n    ...\r\n- public\r\n- server\r\n    - controllers\r\n    - managers\r\n    - services\r\n    - views\r\n    - bootstrap.js\r\n    ...\r\n- app.js\r\n   \r\n```\r\n\r\n##Configuration##\r\nappolo launch configuration options\r\n\r\n####options.paths####\r\nType :`array`, Default: `['config', 'server']`\r\nThe folder will be required and loaded on appolo launch\r\n\r\n####options.root####\r\nType :`string`, Default: process.cwd()\r\nthe root folder of the paths option\r\n\r\n####options.bootStrapClassId####\r\nType :`string`, Default: `(process.env.NODE_ENV || 'development')`\r\nenvironment file name that will override the environment all.js file\r\ndefault is the NODE_ENV or if not defined it will be `development`\r\n\r\n####options.bootStrapClassId####\r\nType :`string`, Default: `appolo-bootstrap`\r\nappolo will try to find the bootstrap class after it launched and run it.\r\nthis is optinal if the class is not defined nothing will happen.\r\n\r\n####options.templateEngine####\r\nType :`string`, Default: 'swig'\r\nthe template engine that will used to render the views\r\nthe template engine using the [consolidate][4] module\r\n\r\n####options.viewsFolder####\r\nType :`string`, Default: '/server/views'\r\nthe folder where your view templates located\r\n\r\n####options.public####\r\nType :`string`, Default: 'public'\r\nthe public folder where all your assets and static files will be located\r\n\r\n####options.loadDefaultConfigurations####\r\nType :`bolean`, Default: 'true'\r\ntrue to load all  express default middlewares and express options. false to load custom middlewares by yourself\r\n```javascript\r\napp.locals.pretty = true;\r\napp.locals.cache = 'memory';\r\napp.set('showStackError', true);\r\napp.use(compression({ level: 9 }));\r\napp.enable('jsonp callback');\r\napp.use(expressValidator());\r\napp.use(bodyParser());\r\napp.use(multer({ dest: './uploads/'}));\r\napp.use(methodOverride());\r\napp.use(cookieParser());\r\napp.use(flash());\r\napp.use(favicon());\r\napp.use(express.static);\r\n```\r\n####options.startMessage####\r\nType :`string`, Default: 'Appolo Server listening on port: {port} version:{version} environment: {environment}'\r\nthe message that will be written to console log the the server starts\r\n####options.startServer####\r\nType :`bolean`, Default: 'true'\r\nif true the server will start immediately to listen to port else you will have to start in manually.\r\n####options.port####\r\nType :`number`, Default: `process.env.PORT || this._options.port || appolo.environment.port || 8080)`\r\nthe port that the app will listen to.\r\nthe port will be determined in the following order if defined: `process.env.PORT`, `options.port`,`appolo.environment.port`, `8080`\r\n####usage example:####\r\n```javascript\r\nvar appolo  = require('appolo');\r\n\r\nappolo.launcher.launch( {\r\n    paths:['config', 'server'],\r\n    root : process.cwd()+'/app',\r\n    environment : 'testing',\r\n    port:8182,\r\n    templateEngine:'ejs'\r\n    \r\n});\r\n```\r\n\r\n##Environments##\r\nWith environments you can define different set of configurations depending on the environment type your app is currently running.\r\nit is recommended to have 4 types of environments : `develpment`, `testing`, `staging`, `production`.\r\nafter `appolo.launch` you can always to access to current environment vars via `appolo.environment`.\r\n```javascript\r\n//all.js\r\nmodule.exports = {\r\n    name:'all'\r\n    someVar:'someVar'\r\n}\r\n//develpment.js\r\nmodule.exports = {\r\n    name:'develpment'\r\n    db:'monog://develpment-url'\r\n}\r\n//develpment.js\r\nmodule.exports = {\r\n    name:'testing'\r\n    db:'monog://testing-url'\r\n}\r\n\r\n```\r\nif we launch our app.js with `NODE_ENV = testing`\r\n```javascript\r\nvar appolo  = require('appolo');\r\nappolo.launcher.launch();\r\nvar env = appolo.environment;\r\n\r\nconsole.log(env.name,env.someVar,env.db) // 'testing someVar monog:://testing-url'\r\n\r\n```\r\n\r\n##Routes ##\r\nyou can easy define your app routes in the `config/routes` folder\r\nthe routes are the same as you defined in [expressjs][5] router\r\n```javascript\r\nmodule.exports = [\r\n    {\r\n        path: '/login/',\r\n        method: 'post',\r\n        controller: 'login',\r\n        action: 'loginUser',\r\n        middleware:[]\r\n        locals:{}\r\n    },\r\n    {\r\n        path: '/users/:id',\r\n        method: 'get',\r\n        controller: 'user',\r\n        action: 'getUser',\r\n        middleware:[function(res,req,next){\r\n            //do something\r\n            next();\r\n        }]\r\n        locals:{}\r\n    }\r\n];\r\n```\r\neach route have the following params:\r\n\r\n - `path` - same as you define in expressjs\r\n - `method` - one of `get`,`post`,`patch`,`delete`,`put`. default `get`\r\n - `controller` - the name of the controller that will be crated to handle the route the controller id must have `Controller` postfix\r\n - `action` - the action function the will be invoked to handle the route\r\n - `middleware` - array of middleware function the will be invoked be before the controller if the next function is not called or called with error the controller won`t be created.\r\n - `locals` - locals object the will extend res.locals \r\n\r\n##Controllers ##\r\nControllers are classes that handled the routes request.\r\nin order the router will be able to handle to request the controller class must inherit from `appolo.Controller`\r\neach controller action will be called with [request][6] and [response][7] objects.\r\n\r\n```javascript\r\nvar appolo = require('appolo');\r\nmodule.exports = appolo.Controller.define({\r\n    $config:{\r\n        id:'loginController',\r\n        inject:['dataManager']\r\n    },\r\n\r\n    loginUser:function(req,res){\r\n        this.dataManager.validateUser(req.body.username,req.body.password)\r\n        .then(this.jsonSuccess.bind(this)\r\n        .fail(this.serverError.bind(this);\r\n    }\r\n})\r\n```\r\n`appolo.Controller` also has some helper functions.\r\n###`controller.render([view,model])`\r\nview render helper function will try to find and render the view  file in view folder according to the controller name and action\r\n\r\n - `view` - the view name if different from the controller action\r\n - `model` - the model that will be passed to the view\r\n \r\n```javascript\r\nvar appolo = require('appolo');\r\nmodule.exports = appolo.Controller.define({\r\n    $config:{\r\n        id:'loginController',\r\n        inject:['dataManager']\r\n    },\r\n\r\n    index:function(req,res){\r\n        this.render({someData:'someData'}) //the will render the view from viewFolder/login/index\r\n    }\r\n})\r\n```\r\n###`controller.jsonSuccess([data])`\r\nsend json success response\r\n\r\n - `data` - the data object will be passed to the response\r\n\r\n```javascript\r\n    login:function(req,res){\r\n        this.jsonSuccess({userId:1})\r\n    }\r\n\r\n//output\r\n{\r\n    \"success\":true,\r\n    \"data\":{\r\n        \"userId\":1\r\n    }\r\n}\r\n```\r\n\r\n###`controller.jsonError([message])`\r\nsend json error response with optinal message\r\n\r\n - `message` - the error message that will be passed to the response\r\n\r\n```javascript\r\n    login:function(req,res){\r\n        this.jsonError(\"something is wrong\")\r\n    }\r\n    \r\n//output\r\n{\r\n    \"success\":false,\r\n    \"message\":\"something is wrong\"\r\n}\r\n```\r\n\r\n###`controller.serverError([message])`\r\nsend response server error 500 with optinal message\r\n\r\n - `message` - the error message that will be passed to the response\r\n\r\n```javascript\r\n    login:function(req,res){\r\n        this.serverError(\"something is wrong\")\r\n    }\r\n```\r\n##Socket.io, Redis, MongoDB and More Support\r\nyou can easily integrate to popular services like socket.io redis and mongoDB in appolo.\r\nall you have to do is to add the service configratio file to the config folder\r\n\r\n####[Sokcet.io][8] example####\r\n```javascript\r\nvar sio = require('socket.io'),\r\n    appolo = require('appolo-express');\r\n\r\nvar app  = appolo.inject.getObject('app');\r\nvar io = sio.listen(app.server);\r\n\r\nappolo.inject.addObject('io', io);\r\nmodule.exports = io;\r\n```\r\n\r\n```javascript\r\nvar appolo  = require('appolo'),\r\n    Q = require('q');\r\n\r\nappolo.Class.define({\r\n    $config:{\r\n        id:'chatController',\r\n        singleton: true,\r\n        initMethod: 'initialize',\r\n        inject:['io']\r\n    },\r\n    initialize:function(){\r\n         \r\n        this.io.sockets.on('connection', function(socket){\r\n            socket.broadcast.to('some_room').emit('message','client connected');\r\n        });\r\n    }\r\n});\r\n\r\n```\r\n\r\n####[Redis][9] and [Q][10] example####\r\n```javascript\r\nvar redis = require('redis'),\r\n    appolo = require('appolo-express'),\r\n    url = require('url');\r\n\r\n//you can put redis connection string in appolo environments to support different redis db in different environments\r\nvar redisURL = url.parse(appolo.environment.redisConnectionString);\r\nvar redisClient = redis.createClient(redisURL.port, redisURL.hostname, {no_ready_check: true});\r\nif(redisURL.auth){\r\n    redisClient.auth(redisURL.auth.split(\":\")[1]);\r\n}\r\n\r\nappolo.inject.addObject('redis', redisClient);\r\nmodule.exports = redisClient;\r\n```\r\n\r\n```javascript\r\nvar appolo  = require('appolo'),\r\n    Q = require('q');\r\n\r\nappolo.Class.define({\r\n    $config:{\r\n        id:'dataManager',\r\n        singleton: true,\r\n        inject:['redis']\r\n    },\r\n    getData:function(){\r\n        var deferred = Q.defer();\r\n        \r\n         this.redis.get('someKey', function (err, value) {\r\n            err ? deferred.reject() : deferred.resolve(value);\r\n         });\r\n         \r\n         return deferred.promise;\r\n    }\r\n});\r\n\r\n```\r\n\r\n####MongoDb with [Mongose][11] and [Q][12] example####\r\n```javascript\r\nvar mongoose = require('mongoose'),,\r\n    appolo = require('appolo-express');\r\n\r\nmongoose.connect(appolo.environment.db);\r\n\r\nvar userSchema = new mongoose.Schema( name : {type: String});\r\nvar userModel = mongoose.model('User', userSchema);\r\n\r\nappolo.inject.addObject('db', mongoose);\r\nappolo.inject.addObject('UserModel', userModel);\r\nmodule.exports = db;\r\n```\r\n\r\n```javascript\r\nvar appolo  = require('appolo'),\r\n    Q = require('q');\r\n\r\nappolo.Class.define({\r\n    $config:{\r\n        id:'userManager',\r\n        singleton: true,\r\n        inject:['UserModel']\r\n    },\r\n    getUser:function(id){\r\n        var deferred = Q.defer();\r\n       \r\n       this.UserModel.findById(id,function(err,data){\r\n            err ? deferred.reject() : deferred.resolve(value);\r\n        });\r\n        \r\n        return deferred.promise;\r\n    }\r\n});\r\n\r\n```\r\n\r\n##Loggers ##\r\nyou can easy add logger to your server just by adding the logger configuraion file to the config folder.\r\n####logger with [winston][13] and [sentry][14]####\r\n```javascript\r\nvar winston = require('winston'),\r\n    appolo = require('appolo-express'),\r\n    Sentry = require('winston-sentry');\r\n\r\nvar transports = [];\r\n\r\nif(appolo.environment.type == 'produnction'){\r\n    transports.push(new Sentry({\r\n            level: 'warn',\r\n            dsn: \"senty connection string\",\r\n            json: true,\r\n            timestamp: true,\r\n            handleExceptions: true,\r\n            patchGlobal: true\r\n    }));\r\n}\r\n\r\ntransports.push(new (winston.transports.Console)({\r\n    json: false,\r\n    timestamp: true,\r\n    handleExceptions: true\r\n}));\r\n\r\nvar logger = new (winston.Logger)({\r\n    transports: transports,\r\n    exitOnError: false\r\n});\r\n\r\nappolo.inject.addObject('logger', logger);\r\nmodule.exports = logger;\r\n```\r\n\r\n```javascript\r\nvar appolo  = require('appolo');\r\n\r\nappolo.Class.define({\r\n    $config:{\r\n        id:'dataManager',\r\n        singleton: true,\r\n        initMethod: 'initialize',\r\n        inject:['logger']\r\n    },\r\n    initialize:function(){\r\n        this.logger.info(\"dataManager initialized\",{someData:'someData'})\r\n    }\r\n});\r\n\r\n```\r\n\r\n\r\n\r\n##Class System ##\r\nappolo have powerful class system based on [appolo-class][15].\r\nenables you write your server code classes in elegant way with `inheritance` and `mixins` for better code reuse.\r\n```javascript\r\nvar appolo  = require('appolo');\r\n\r\nvar Rectangle = appolo.Class.define({\r\n    constructor: function (width, height) {\r\n        this.height = height;\r\n        this.width = width;\r\n    },\r\n    area: function () {\r\n        return this.width * this.height;\r\n    }\r\n});\r\n\r\nvar Square = Rectangle.define({\r\n    constructor: function (side) {\r\n        this.callParent(side, side);\r\n    }\r\n});\r\n\r\nvar square = new Square(6);\r\nconsole.log(square.area()) // 36\r\n```\r\n\r\n##Dependency Injection System ##\r\nappolo have powerful [Dependency Injection][16] system based on [appolo-inject][17].\r\nenables you to organize your code in [loose coupling][18] classes.\r\nyou can always access to injector via `appolo-inject`.\r\n```javascript\r\nvar appolo  = require('appolo');\r\n\r\nappolo.Class.define({\r\n    $config:{\r\n        id:'dataManager',\r\n        singleton: true\r\n    },\r\n    getData:function(){\r\n        ...\r\n    }\r\n});\r\n\r\nappolo.Class.define({\r\n    $config:{\r\n        id:'fooController',\r\n        singleton: false,\r\n        initMethod:'initialize',\r\n        inject:['dataManager']\r\n    },\r\n    constructor: function () {\r\n        this.data = null\r\n    },\r\n    \r\n    initialize:fucntion(){\r\n        this.data =  this.dataManager.getData();\r\n        //do something\r\n    }\r\n    ...\r\n});\r\n\r\nvar fooController = appolo.inject.getObject('fooController');\r\nconsole.log(fooController.data)\r\n```\r\n\r\n##Event Dispatcher ##\r\nappolo have built in event dispatcher to enable classes to listen and fire events\r\nEvent Dispatcher has the following methods:\r\n\r\n###`eventDispatcher.on(event,callback,[scope])`\r\nadd event listener\r\n\r\n - `event` - event name.\r\n - `callback` - callback function that will triggered on event name.\r\n - `scope` - optinal, the scope of the `callback` function default: `this`.\r\n\r\n###`eventDispatcher.un(event,callback,[scope])`     \r\nremove event listener all the arguments must be `===` to on method else it won`t be removed.\r\n\r\n -  `event` - event name.\r\n -  `callback` - callback function.\r\n -  `scope` - optinal, the scope of the callback function.\r\n \r\n###`eventDispatcher.fireEvent(event,[arguments])`\r\nfireEvent - triggers the callback functions on given event name\r\n\r\n- `eventName`\r\n- `arguments` -  all the rest `arguments` will be applied on the `callback` function\r\n\r\n```javascript\r\nvar appolo  = require('appolo');\r\n\r\nappolo.EventDispatcher.define({\r\n    $config:{\r\n        id:'fooManager',\r\n        singleton: true\r\n    },\r\n    notifyUsers:function(){\r\n    \r\n        this.fireEvent('someEventName',{someData:'someData'})\r\n    }\r\n    ...\r\n});\r\n\r\nappolo.Class.define({\r\n    $config:{\r\n        id:'fooController',\r\n        initMethod:'initialize',\r\n        inject:['fooManager']\r\n    },\r\n    initialize:function(){\r\n        this.fooManager.on('someEventName',function(data){\r\n            this.doSomething(data.someData)\r\n        },this);\r\n    },\r\n    doSomething:function(){\r\n    }\r\n    ...\r\n});\r\n\r\n```\r\n\r\n##Appolo Bootstrap ##\r\n\r\nonce it lanched appolo try to find appolo `bootstrap` class and call it's `run` mehtod.\r\n```javascript\r\nvar appolo  = require('appolo');\r\n\r\nappolo.Class.define({\r\n    $config:{\r\n        id:'appolo-bootstrap',\r\n        singleton: true,\r\n        inject:['someManager1','someManager2']\r\n    },\r\n    run:function(){\r\n        //start your application logic here\r\n        this.someManager1.doSomeThing();\r\n    }\r\n    ...\r\n});\r\n\r\n```\r\n\r\n\r\n    \r\n## Tests ##\r\n```javascript\r\n    grunt test\r\n```\r\n\r\n## License ##\r\n\r\nThe `appolo` library is released under the MIT license. So feel free to modify and distribute it as you wish.\r\n\r\n\r\n  [1]: http://expressjs.com/\r\n  [2]: www.github.com/shmoop207/appolo-class\r\n  [3]: www.github.com/shmoop207/appolo-inject\r\n  [4]: https://www.npmjs.org/package/consolidate\r\n  [5]: http://expressjs.com/4x/api.html#router\r\n  [6]: http://expressjs.com/4x/api.html#req.params\r\n  [7]: http://expressjs.com/4x/api.html#res.status\r\n  [8]: https://github.com/Automattic/socket.io\r\n  [9]: https://github.com/mranney/node_redis\r\n  [10]: https://github.com/kriskowal/q\r\n  [11]: https://github.com/LearnBoost/mongoose\r\n  [12]: https://github.com/kriskowal/q\r\n  [13]: https://github.com/flatiron/winston\r\n  [14]: https://github.com/getsentry/sentry\r\n  [15]: https://github.com/shmoop207/appolo-class\r\n  [16]: http://en.wikipedia.org/wiki/Dependency_injection\r\n  [17]: https://github.com/shmoop207/appolo-inject\r\n  [18]: http://en.wikipedia.org/wiki/Loose_coupling\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}